import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Navigation from '@/components/Navigation';
import Footer from '@/components/Footer';
import { supabase } from '@/integrations/supabase/client';
import { Database } from '@/integrations/supabase/types';
import { useNavigate } from 'react-router-dom';

// Type for trek row
// (autogenerated from Supabase types)
type Trek = Database['public']['Tables']['treks']['Row'];

const Treks: React.FC = () => {
  const [treks, setTreks] = useState<Trek[]>([]);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchTreks = async () => {
      setLoading(true);
      const { data, error } = await supabase
        .from('treks')
        .select('*')
        .order('created_at', { ascending: false });
      if (!error && data) {
        setTreks(data);
      }
      setLoading(false);
    };
    fetchTreks();
  }, []);

  return (
    <div className="min-h-screen flex flex-col">
      <Navigation />
      <main className="flex-1 container mx-auto px-4 py-12">
        <h1 className="text-3xl font-bold mb-8 text-center">All Treks</h1>
        {loading ? (
          <div className="text-center">Loading...</div>
        ) : treks.length === 0 ? (
          <div className="text-center text-muted-foreground">No treks found.</div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {treks.map((trek) => (
              <Card
                key={trek.id}
                className="cursor-pointer hover:shadow-lg transition-shadow duration-300 overflow-hidden"
                onClick={() => navigate(`/treks/${trek.id}`)}
              >
                {trek.photos && trek.photos.length > 0 && (
                  <img
                    src={trek.photos[0]}
                    alt={trek.name}
                    className="w-full h-48 object-cover"
                  />
                )}
                <CardContent className="p-4">
                  <div className="flex justify-between items-center mb-2">
                    <CardTitle className="text-lg">{trek.name}</CardTitle>
                    {trek.difficulty && (
                      <span className="text-xs bg-gray-100 rounded px-2 py-1 ml-2">{trek.difficulty}</span>
                    )}
                  </div>
                  <CardDescription className="mb-2">
                    {trek.duration && <span>Duration: {trek.duration}</span>}
                  </CardDescription>
                  <Button
                    size="sm"
                    className="mt-2 bg-primary hover:bg-primary/90"
                    disabled
                  >
                    View Details
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </main>
      <Footer />
    </div>
  );
};

export default Treks; 