import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Navigation from '@/components/Navigation';
import Footer from '@/components/Footer';
import { supabase } from '@/integrations/supabase/client';
import { Database } from '@/integrations/supabase/types';
import { useNavigate } from 'react-router-dom';

// Type for accommodation row
// (autogenerated from Supabase types)
type Accommodation = Database['public']['Tables']['accommodations']['Row'];

const Accommodations: React.FC = () => {
  const [accommodations, setAccommodations] = useState<Accommodation[]>([]);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  const formatLocation = (location: any): string => {
    if (!location) return 'Location not specified';
    if (typeof location === 'string') return location;
    if (typeof location === 'object' && 'lat' in location && 'lng' in location) {
      return `Location: (${location.lat}, ${location.lng})`;
    }
    return 'Location not specified';
  };

  useEffect(() => {
    const fetchAccommodations = async () => {
      setLoading(true);
      const { data, error } = await supabase
        .from('accommodations')
        .select('*')
        .order('created_at', { ascending: false });
      if (!error && data) {
        setAccommodations(data);
      }
      setLoading(false);
    };
    fetchAccommodations();
  }, []);

  return (
    <div className="min-h-screen flex flex-col">
      <Navigation />
      <main className="flex-1 container mx-auto px-4 py-12">
        <h1 className="text-3xl font-bold mb-8 text-center">All Accommodations</h1>
        {loading ? (
          <div className="text-center">Loading...</div>
        ) : accommodations.length === 0 ? (
          <div className="text-center text-muted-foreground">No accommodations found.</div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {accommodations.map((acc) => (
              <Card
                key={acc.id}
                className="cursor-pointer hover:shadow-lg transition-shadow duration-300 overflow-hidden"
                onClick={() => navigate(`/accommodations/${acc.id}`)}
              >
                {acc.photos && acc.photos.length > 0 && (
                  <img
                    src={acc.photos[0]}
                    alt={acc.name}
                    className="w-full h-48 object-cover"
                  />
                )}
                <CardContent className="p-4">
                  <div className="flex justify-between items-center mb-2">
                    <CardTitle className="text-lg">{acc.name}</CardTitle>
                    {acc.type && (
                      <span className="text-xs bg-gray-100 rounded px-2 py-1 ml-2">{acc.type}</span>
                    )}
                  </div>
                  <CardDescription className="mb-2">
                    {formatLocation(acc.location)}
                  </CardDescription>
                  {acc.price_range && (
                    <div className="mb-2 text-primary font-semibold">{acc.price_range}</div>
                  )}
                  <Button
                    size="sm"
                    className="mt-2 bg-primary hover:bg-primary/90"
                    disabled
                  >
                    View Details
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </main>
      <Footer />
    </div>
  );
};

export default Accommodations; 